{"version":3,"sources":["images/linkedin.svg","images/github.svg","images/headshot.jpg","images/dfs-optimizer-example.png","components/Navbar/Navbar.tsx","components/Links/Links.tsx","constants.ts","components/Home/Home.tsx","components/About/About.tsx","components/Resume/Resume.tsx","components/Projects/Projects.tsx","ScrollToTop.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Navbar","props","selectedButton","changeSelectedButton","className","onClick","to","linkedIn","require","github","Links","href","target","rel","src","alt","Home","headshot","About","Resume","title","scrolling","dfsOptimizerExample","Projects","ScrollToTop","prevProps","this","location","window","scrollTo","children","Component","withRouter","App","setState","state","path","render","exact","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.83a5543e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/linkedin.e6a96407.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.0c8a8728.svg\";","module.exports = __webpack_public_path__ + \"static/media/headshot.21f41416.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dfs-optimizer-example.0c1be3d1.png\";","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './Navbar.css';\n\nexport const Navbar = (props: {selectedButton: string, changeSelectedButton: any}) => {\n    const {selectedButton, changeSelectedButton} = props;\n    return (\n        <div className=\"Navbar\">\n            <Link onClick={() => changeSelectedButton('home')}\n                  className={(selectedButton === 'home') ? \"Selected\" : \"Unselected\"} to=\"/\">Home</Link>\n            <Link onClick={() => changeSelectedButton('about')}\n                  className={(selectedButton === 'about') ? \"Selected\" : \"Unselected\"} to=\"/about\">About Me</Link>\n            <Link onClick={() => changeSelectedButton('resume')}\n                  className={(selectedButton === 'resume') ? \"Selected\" : \"Unselected\"} to=\"/resume\">Resume</Link>\n            <Link onClick={() => changeSelectedButton('projects')}\n                  className={(selectedButton === 'projects') ? \"Selected\" : \"Unselected\"} to=\"/projects\">Projects</Link>\n        </div>\n    );\n};\n","import React from 'react';\nimport './Links.css';\nimport {GITHUB_LINK, LINKED_IN_LINK} from \"../../constants\";\n\nconst linkedIn = require('../../images/linkedin.svg');\nconst github = require('../../images/github.svg');\n\nexport const Links = () => {\n    return (\n        <div className=\"Links\">\n            <a href={LINKED_IN_LINK} target={\"_blank\"} rel={\"noopener noreferrer\"}>\n                <img src={linkedIn} alt={'LinkedIn'}/>\n            </a>\n            <a href={GITHUB_LINK} target={\"_blank\"} rel={\"noopener noreferrer\"}>\n                <img src={github} alt={'GitHub'}/>\n            </a>\n        </div>\n    );\n};\n","export const GOOGLE_DOCS_EMBED_LINK_FOR_RESUME = \"https://docs.google.com/document/d/e/2PACX-1vR7KuXM96JBgn0dtDI8nA8bhCIszgntZblap9226e_sNHoUc-o-Yr1I7jRk3bs6k_LPOX3hm0597h0Q/pub?embedded=true\";\nexport const CLEAN_CODE_LINK = \"https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882\";\nexport const PLURALSIGHT_LINK = \"https://www.pluralsight.com/\";\nexport const LINKED_IN_LINK = \"https://www.linkedin.com/in/dan-adajian-aa8aaa72/\";\nexport const GITHUB_LINK = \"https://github.com/danadajian/\";\nexport const DFS_OPTIMIZER_SITE = \"https://dfsoptimizer.app\";\nexport const KNAPSACK_PROBLEM_LINK = \"https://en.wikipedia.org/wiki/Knapsack_problem\";\n","import React from 'react';\nimport '../../App.css';\nimport './Home.css';\nimport {Navbar} from '../Navbar/Navbar';\nimport {Links} from \"../Links/Links\";\n\nexport const Home = (props: {selectedButton: string, changeSelectedButton: any}) => {\n    const {selectedButton, changeSelectedButton} = props;\n    return (\n        <div className=\"Home\">\n            <div className=\"Overlay\">\n                <Navbar selectedButton={selectedButton} changeSelectedButton={changeSelectedButton}/>\n                <h1>Dan Adajian</h1>\n                <p>\n                    Welcome to my site! I'm a software developer from Chicago, IL.\n                </p>\n                <Links/>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\nimport '../../App.css';\nimport './About.css';\nimport {Navbar} from '../Navbar/Navbar';\nimport {CLEAN_CODE_LINK, PLURALSIGHT_LINK} from \"../../constants\";\nimport {Links} from \"../Links/Links\";\n\nconst headshot = require('../../images/headshot.jpg');\n\nexport const About = (props: { selectedButton: string, changeSelectedButton: any }) => {\n    const {selectedButton, changeSelectedButton} = props;\n    return (\n        <div>\n            <div className=\"Header\">\n                <Navbar selectedButton={selectedButton} changeSelectedButton={changeSelectedButton}/>\n            </div>\n            <div className=\"Container\">\n                <div className=\"About\">\n                    <section>\n                        <body>\n                        <img src={headshot} alt='Headshot'/>\n                        <p>\n                            I am a self-taught programmer and have become adept at learning new technologies quickly. I\n                            love automating tasks to save time. I'm a strong advocate of test-driven development and\n                            pair-programming, and I exclusively write software guided by the principles of <a\n                            href={CLEAN_CODE_LINK} target={\"_blank\"} rel={\"noopener noreferrer\"}>clean code</a>.\n                        </p>\n                        </body>\n                    </section>\n                    <section>\n                        <body>\n                        <h3>Professional Experience</h3>\n                        <li>\n                            Hands-on experience using Node.js and the AWS serverless application model to\n                            productionalize machine learning models\n                        </li>\n                        <li>\n                            Experience refactoring and maintaining React.js and Python code\n                        </li>\n                        <h3>Coursework</h3>\n                        <li>\n                            Watched over 30 hours of course\n                            content on <a href={PLURALSIGHT_LINK} target={\"_blank\"}\n                                          rel={\"noopener noreferrer\"}>Pluralsight</a> spanning the topics of Java\n                            fundamentals, test-driven development, Java testing frameworks,\n                            object-oriented programming, and AWS frameworks\n                        </li>\n                        <li>\n                            Scored in the 88th percentile on Pluralsight's Java Fundamentals assessment.\n                        </li>\n                        </body>\n                    </section>\n                    <section>\n                        <body>\n                        <h3>Education</h3>\n                        <li>\n                            Graduated from Northwestern University with a Bachelor's Degree in Math and Economics.\n                        </li>\n                        </body>\n                    </section>\n                    <section>\n                        <body>\n                        <h3>Interests</h3>\n                        <p>\n                            I play golf when it's over 40 degrees out, and paddle tennis otherwise. I also enjoy\n                            watching\n                            football, playing the piano, and producing music.\n                        </p>\n                        </body>\n                    </section>\n                </div>\n            </div>\n            <Links/>\n        </div>\n    );\n};\n","import React from 'react';\nimport './Resume.css';\nimport {GOOGLE_DOCS_EMBED_LINK_FOR_RESUME} from \"../../constants\";\nimport {Navbar} from '../Navbar/Navbar';\nimport {Links} from \"../Links/Links\";\n\nexport const Resume = (props: { selectedButton: string, changeSelectedButton: any }) => {\n    const {selectedButton, changeSelectedButton} = props;\n    return (\n        <div>\n            <div className=\"Header\">\n                <Navbar selectedButton={selectedButton} changeSelectedButton={changeSelectedButton}/>\n            </div>\n            <div className=\"Container\">\n                <body className=\"Resume\">\n                <iframe title={'Resume'} src={GOOGLE_DOCS_EMBED_LINK_FOR_RESUME} scrolling=\"no\"/>\n                </body>\n            </div>\n            <Links/>\n        </div>\n    );\n};\n","import React from 'react';\nimport './Projects.css';\nimport {Navbar} from '../Navbar/Navbar';\nimport {Links} from \"../Links/Links\";\nimport {DFS_OPTIMIZER_SITE, GITHUB_LINK, KNAPSACK_PROBLEM_LINK} from \"../../constants\";\n\nconst dfsOptimizerExample = require('../../images/dfs-optimizer-example.png');\n\nexport const Projects = (props: { selectedButton: string, changeSelectedButton: any }) => {\n    const {selectedButton, changeSelectedButton} = props;\n    return (\n        <div>\n            <div className=\"Header\">\n                <Navbar selectedButton={selectedButton} changeSelectedButton={changeSelectedButton}/>\n            </div>\n            <div className=\"Container\">\n                <div className=\"Projects\">\n                    <section>\n                        <body>\n                        <h1>Daily Fantasy Sports Lineup Optimizer</h1>\n                        <a href={DFS_OPTIMIZER_SITE} target={\"_blank\"}\n                           rel={\"noopener noreferrer\"}>https://dfsoptimizer.app</a>\n                        <h3>Overview</h3>\n                        <p>\n                            My Daily Fantasy Sports (DFS) lineup optimizer aims to generate a lineup of players such\n                            that the lineup's total projected points are maximized, given the constraint that the\n                            lineup's total salary is within the salary cap. Each player has a position, a projection,\n                            and a salary, and a lineup must contain a certain number of each position. The optimization\n                            problem presented here is a type of <a href={KNAPSACK_PROBLEM_LINK}>knapsack problem</a>,\n                            which involves picking items with weights and values optimally to fit inside a knapsack.\n                        </p>\n                        <img src={dfsOptimizerExample} alt={'DFS Optimizer Example'}/>\n                        <h3>My Solution</h3>\n                        <p>\n                            The method I developed uses what I call \"selective brute force\", which reduces the problem\n                            efficiently to make checking all possibilities feasible. First, players are grouped by\n                            position\n                            and sorted by their salary-to-projection ratios. Then, players are removed from each\n                            position\n                            pool until the maximum number of lineup combinations is under a specified fixed threshold.\n                            Finally, a recursive algorithm efficiently iterates over possible lineups one by one,\n                            ensuring\n                            each new lineup it checks has the potential to be better (i.e. has a higher projected point\n                            total).\n                        </p>\n                        <p>\n                            The app currently supports Fanduel and Draftkings contests, and scrapes data from multiple\n                            sources.\n                        </p>\n                        </body>\n                    </section>\n                    <section>\n                        <body>\n                        <h3>More project overviews coming soon! In the meantime, check out my <a\n                            href={GITHUB_LINK} target={\"_blank\"}\n                            rel={\"noopener noreferrer\"}>GitHub</a>.\n                        </h3>\n                        </body>\n                    </section>\n                </div>\n            </div>\n            <Links/>\n        </div>\n    );\n};\n","import { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nclass ScrollToTop extends Component {\n    componentDidUpdate(prevProps: any) {\n        const props: any = this.props;\n        if (props.location !== prevProps.location) {\n            window.scrollTo(0, 0);\n        }\n    }\n\n    render() {\n        return this.props.children\n    }\n}\n\n// @ts-ignore\nexport default withRouter(ScrollToTop)","import React, {Component} from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport {Home} from \"./components/Home/Home\";\nimport {About} from \"./components/About/About\";\nimport {Resume} from \"./components/Resume/Resume\";\nimport {Projects} from \"./components/Projects/Projects\";\nimport ScrollToTop from \"./ScrollToTop\";\n\nclass App extends Component {\n    constructor(props: any) {\n        super(props);\n        this.state = {selectedButton: 'home'}\n    }\n\n    changeSelectedButton = (selectedButton: string) => {\n        this.setState({selectedButton})\n    };\n\n    render() {\n        const {selectedButton}: any = this.state;\n        return (\n            <BrowserRouter>\n                <ScrollToTop>\n                    <Switch>\n                        <Route path=\"/\" render={() => <Home selectedButton={selectedButton}\n                                                            changeSelectedButton={this.changeSelectedButton}/>} exact/>\n                        <Route path=\"/about\" render={() => <About selectedButton={selectedButton}\n                                                                  changeSelectedButton={this.changeSelectedButton}/>}/>\n                        <Route path=\"/resume\" render={() => <Resume selectedButton={selectedButton}\n                                                                    changeSelectedButton={this.changeSelectedButton}/>}/>\n                        <Route path=\"/projects\" render={() => <Projects selectedButton={selectedButton}\n                                                                        changeSelectedButton={this.changeSelectedButton}/>}/>\n                    </Switch>\n                </ScrollToTop>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}