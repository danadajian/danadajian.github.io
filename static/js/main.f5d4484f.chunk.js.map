{"version":3,"sources":["components/Navbar.tsx","components/Home.tsx","components/Resume.tsx","constants.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","to","Home","className","Resume","title","src","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAIaA,G,MAAS,WAClB,OACI,6BACI,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,aCJCC,EAAO,WAChB,OACI,yBAAKC,UAAU,OACX,kBAAC,EAAD,MACA,4BAAQA,UAAU,cACd,2CACA,qDCLHC,EAAS,WAClB,OACI,yBAAKD,UAAU,OACX,kBAAC,EAAD,MACA,4BAAQE,MAAO,SAAUC,ICTY,oJCgBlCC,EAXH,WACV,OACI,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWP,EAAMQ,OAAK,IACtC,kBAAC,IAAD,CAAOF,KAAK,UAAUC,UAAWL,OCEvBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAENC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f5d4484f.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../App.css';\n\nexport const Navbar = () => {\n    return (\n        <div>\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/resume\">Resume</Link>\n        </div>\n    );\n};\n","import React from 'react';\nimport '../App.css';\nimport {Navbar} from \"./Navbar\";\n\nexport const Home = () => {\n    return (\n        <div className=\"App\">\n            <Navbar/>\n            <header className=\"App-header\">\n                <h1>Dan Adajian</h1>\n                <p>\n                    Welcome to my site!\n                </p>\n            </header>\n        </div>\n    );\n};\n","import React from 'react';\nimport '../App.css';\nimport {GOOGLE_DOCS_EMBED_LINK_FOR_RESUME} from \"../constants\";\nimport {Navbar} from \"./Navbar\";\n\nexport const Resume = () => {\n    return (\n        <div className=\"App\">\n            <Navbar/>\n            <iframe title={'Resume'} src={GOOGLE_DOCS_EMBED_LINK_FOR_RESUME}/>\n        </div>\n    );\n};\n","export const GOOGLE_DOCS_EMBED_LINK_FOR_RESUME = \"https://docs.google.com/document/d/e/2PACX-1vR7KuXM96JBgn0dtDI8nA8bhCIszgntZblap9226e_sNHoUc-o-Yr1I7jRk3bs6k_LPOX3hm0597h0Q/pub?embedded=true\";\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport {Home} from \"./components/Home\";\nimport {Resume} from \"./components/Resume\";\n\nconst App = () => {\n  return (\n      <main>\n        <Switch>\n          <Route path=\"/\" component={Home} exact />\n          <Route path=\"/resume\" component={Resume} />\n        </Switch>\n      </main>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}